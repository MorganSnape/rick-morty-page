---
interface Props {
  current: number;
  maxPage: number;
  sizeCenterLinks?: number;
  urlGen: (page: number) => string;
  type: "FIRTS"| "RIGHT";
}
const { current, maxPage, sizeCenterLinks, urlGen } = Astro.props;

function computeCenterLinks(
  current: number,
  size: number,
  max: number
): number[][] {
  let arr1: number[] = [];
  let arr2: number[] = [];

  for (let i = 1; i <= size; i++) {
    const resta = current - i;
    arr1.unshift(resta);
  }

  arr1 = arr1.filter((page) => page >= 1);

  for (let i = 1; i <= size; i++) {
    const suma = current + i;
    arr2.push(suma);
  }

  console.log(arr2);
  arr2 = arr2.filter((page) => page <= max);

  return [arr1, arr2];
}

const centerLinks = sizeCenterLinks || 1;

const isActiveFirstPage: boolean = current - centerLinks > 1;
const isActiveFirstSeparator: boolean = current - centerLinks > 2;

const isActiveAfterPages: boolean = maxPage - current > centerLinks;
const isActiveLastSeparator: boolean = maxPage - current > centerLinks + 1;
---

{
  isActiveFirstSeparator && (
    <svg
      class="icon separador visible"
      viewBox="0 0 24 24"
      stroke-width="1.5"
      stroke="#ffffff"
      fill="none"
      stroke-linecap="round"
      stroke-linejoin="round"
    >
      <path stroke="none" d="M0 0h24v24H0z" fill="none" />
      <path d="M8 12l0 .01" />
      <path d="M12 12l0 .01" />
      <path d="M16 12l0 .01" />
    </svg>
  )
}

{
  isActiveLastSeparator && (
    <svg
      class="icon separador visible"
      viewBox="0 0 24 24"
      stroke-width="1.5"
      stroke="#ffffff"
      stroke-linecap="round"
      stroke-linejoin="round"
    >
      <path stroke="none" d="M0 0h24v24H0z" fill="none" />
      <path d="M8 12l0 .01" />
      <path d="M12 12l0 .01" />
      <path d="M16 12l0 .01" />
    </svg>
  )
}